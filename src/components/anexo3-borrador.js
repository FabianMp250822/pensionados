import React from 'react';
import { useSelector } from 'react-redux';
import './Anexo2.css';

const Anexo2 = ({ usuarioSeleccionado }) => {
  // Obtener los datos de pensiones del estado Redux
  const { pensiones } = useSelector((state) => state.pensiones);

  // Funci√≥n para deduplicar pagos por a√±o y per√≠odo exacto
  const deduplicarPagos = (pagos) => {
    console.log(`üîç Iniciando deduplicaci√≥n de ${pagos.length} pagos...`);
    
    const pagosUnicos = [];
    const vistosMap = new Map();
    const duplicadosEliminados = [];

    pagos.forEach((pago, index) => {
      // Usar el periodoPago EXACTO como est√°, sin normalizaci√≥n
      // Ejemplo: "16 ago. 2013 a 31 ago. 2013"
      const periodoExacto = pago.periodoPago?.trim() || 'sin-periodo';

      // Obtener el valor de la mesada principal
      let valorMesada = 0;
      if (pago.detalles && Array.isArray(pago.detalles)) {
        const mesadaDetalle = pago.detalles.find(det => det.codigo === 'MESAD');
        if (mesadaDetalle) {
          valorMesada = mesadaDetalle.ingresos || 0;
        }
      }

      // Crear clave √∫nica basada en a√±o y per√≠odo EXACTO
      // Si dos pagos tienen el mismo a√±o y exactamente el mismo periodoPago, son duplicados
      const clave = `${pago.a√±o}-${periodoExacto}`;
      
      if (!vistosMap.has(clave)) {
        vistosMap.set(clave, {
          indice: index,
          a√±o: pago.a√±o,
          periodo: pago.periodoPago,
          valorMesada: valorMesada
        });
        pagosUnicos.push(pago);
        console.log(`‚úÖ Pago √∫nico agregado: ${pago.a√±o} - "${periodoExacto}" - $${valorMesada.toLocaleString()}`);
      } else {
        const original = vistosMap.get(clave);
        duplicadosEliminados.push({
          original: `√çndice ${original.indice}: ${original.a√±o} - "${original.periodo}" ($${original.valorMesada.toLocaleString()})`,
          duplicado: `√çndice ${index}: ${pago.a√±o} - "${pago.periodoPago}" ($${valorMesada.toLocaleString()})`
        });
        console.log(`ÔøΩ DUPLICADO DETECTADO:`);
        console.log(`   Per√≠odo duplicado: "${periodoExacto}"`);
        console.log(`   Original (mantenido): √çndice ${original.indice} - $${original.valorMesada.toLocaleString()}`);
        console.log(`   Duplicado (eliminado): √çndice ${index} - $${valorMesada.toLocaleString()}`);
      }
    });

    if (pagos.length !== pagosUnicos.length) {
      console.log(`üìä Deduplicaci√≥n completada: ${pagos.length} ‚Üí ${pagosUnicos.length} pagos √∫nicos`);
      console.log(`üóëÔ∏è Eliminados ${pagos.length - pagosUnicos.length} duplicados`);
      
      // Mostrar detalles de los duplicados eliminados
      console.log('üìã RESUMEN DE DUPLICADOS ELIMINADOS:');
      duplicadosEliminados.forEach((dup, idx) => {
        console.log(`  ${idx + 1}. Mantenido: ${dup.original}`);
        console.log(`     Eliminado: ${dup.duplicado}`);
      });
      
      // Agrupar por a√±o para an√°lisis
      const porA√±o = {};
      pagosUnicos.forEach(pago => {
        if (!porA√±o[pago.a√±o]) porA√±o[pago.a√±o] = 0;
        porA√±o[pago.a√±o]++;
      });
      
      console.log('üìà Pagos √∫nicos por a√±o despu√©s de deduplicaci√≥n:');
      Object.keys(porA√±o).sort().forEach(a√±o => {
        console.log(`  ${a√±o}: ${porA√±o[a√±o]} pagos`);
      });
      
      // Mostrar algunos ejemplos de per√≠odos √∫nicos mantenidos
      console.log('üìù Ejemplos de per√≠odos √∫nicos mantenidos:');
      pagosUnicos.slice(0, 10).forEach((pago, idx) => {
        console.log(`  ${idx + 1}. ${pago.a√±o} - "${pago.periodoPago}"`);
      });
    } else {
      console.log('‚úÖ No se encontraron duplicados - todos los per√≠odos son √∫nicos');
    }

    return pagosUnicos;
  };

  // Aplicar deduplicaci√≥n y limitaci√≥n de mesadas por a√±o
  const pensionesUnicas = deduplicarPagos(pensiones);
  
  // Funci√≥n adicional para limitar mesadas por a√±o a m√°ximo 14
  const limitarMesadasPorA√±o = (pagos) => {
    console.log('üîß Aplicando l√≠mite m√°ximo de 14 mesadas por a√±o...');
    
    const pagosLimitados = [];
    const estadisticasLimite = {};
    
    // Agrupar por a√±o
    const pagosPorA√±o = {};
    pagos.forEach(pago => {
      if (!pagosPorA√±o[pago.a√±o]) {
        pagosPorA√±o[pago.a√±o] = [];
      }
      pagosPorA√±o[pago.a√±o].push(pago);
    });
    
    // Procesar cada a√±o
    Object.keys(pagosPorA√±o).sort().forEach(a√±o => {
      const pagosDelA√±o = pagosPorA√±o[a√±o];
      estadisticasLimite[a√±o] = {
        original: pagosDelA√±o.length,
        limitado: 0,
        eliminados: 0
      };
      
      if (pagosDelA√±o.length <= 14) {
        // Si hay 14 o menos, mantener todos
        pagosLimitados.push(...pagosDelA√±o);
        estadisticasLimite[a√±o].limitado = pagosDelA√±o.length;
        console.log(`‚úÖ A√±o ${a√±o}: ${pagosDelA√±o.length} pagos (dentro del l√≠mite)`);
      } else {
        // Si hay m√°s de 14, tomar solo los primeros 14 cronol√≥gicamente
        const pagosOrdenados = pagosDelA√±o.sort((a, b) => {
          const mesesMap = {
            ene: 1, enero: 1, feb: 2, febrero: 2, mar: 3, marzo: 3,
            abr: 4, abril: 4, may: 5, mayo: 5, jun: 6, junio: 6,
            jul: 7, julio: 7, ago: 8, agosto: 8, sep: 9, sept: 9, septiembre: 9,
            oct: 10, octubre: 10, nov: 11, noviembre: 11, dic: 12, diciembre: 12
          };

          const obtenerMes = (periodo) => {
            if (!periodo) return 1;
            const periodoLower = periodo.toLowerCase();
            for (let [key, valor] of Object.entries(mesesMap)) {
              if (periodoLower.includes(key)) return valor;
            }
            return 1;
          };

          return obtenerMes(a.periodoPago) - obtenerMes(b.periodoPago);
        });
        
        const pagosSeleccionados = pagosOrdenados.slice(0, 14);
        const pagosEliminados = pagosOrdenados.slice(14);
        
        pagosLimitados.push(...pagosSeleccionados);
        estadisticasLimite[a√±o].limitado = 14;
        estadisticasLimite[a√±o].eliminados = pagosEliminados.length;
        
        console.log(`üö® A√±o ${a√±o}: ${pagosDelA√±o.length} ‚Üí 14 pagos (eliminados ${pagosEliminados.length})`);
        console.log(`   Per√≠odos mantenidos:`);
        pagosSeleccionados.forEach((pago, idx) => {
          console.log(`     ${idx + 1}. "${pago.periodoPago}"`);
        });
        console.log(`   Per√≠odos eliminados por exceso:`);
        pagosEliminados.slice(0, 5).forEach((pago, idx) => {
          console.log(`     ${idx + 1}. "${pago.periodoPago}"`);
        });
        if (pagosEliminados.length > 5) {
          console.log(`     ... y ${pagosEliminados.length - 5} m√°s`);
        }
      }
    });
    
    console.log('üìä RESUMEN DE LIMITACI√ìN POR A√ëO:');
    Object.keys(estadisticasLimite).sort().forEach(a√±o => {
      const stats = estadisticasLimite[a√±o];
      console.log(`  ${a√±o}: ${stats.original} ‚Üí ${stats.limitado} (eliminados: ${stats.eliminados})`);
    });
    
    return pagosLimitados;
  };
  
  // Aplicar ambas funciones: deduplicaci√≥n + limitaci√≥n
  const pagosFinales = pensiones; // Usar todos los pagos (incluyendo quincenales)

  // Funci√≥n para obtener el pago de enero de un a√±o espec√≠fico
  const obtenerPagoEnero = (a√±o) => {
    // Buscar pagos del a√±o espec√≠fico (usando pagos finales)
    const pagosA√±o = pagosFinales.filter(pago => {
      const a√±oPago = parseInt(pago.a√±o);
      return a√±oPago === a√±o;
    });

    if (pagosA√±o.length === 0) return 0;

    // Buscar espec√≠ficamente enero
    let pagoEnero = pagosA√±o.find(pago => {
      const periodoLower = pago.periodoPago?.toLowerCase() || '';
      return (
        periodoLower.includes('ene') || 
        periodoLower.includes('enero') ||
        periodoLower.startsWith('ene.') ||
        periodoLower === 'enero' ||
        periodoLower === 'ene'
      );
    });

    // Si no hay enero espec√≠fico, tomar el primer pago del a√±o
    if (!pagoEnero && pagosA√±o.length > 0) {
      // Ordenar por periodo para obtener el primer pago del a√±o
      const pagosOrdenados = pagosA√±o.sort((a, b) => {
        const periodoA = a.periodoPago?.toLowerCase() || '';
        const periodoB = b.periodoPago?.toLowerCase() || '';
        return periodoA.localeCompare(periodoB);
      });
      pagoEnero = pagosOrdenados[0];
    }

    if (pagoEnero && Array.isArray(pagoEnero.detalles)) {
      const mesadaDetalle = pagoEnero.detalles.find(det => det.codigo === 'MESAD');
      return mesadaDetalle ? mesadaDetalle.ingresos : 0;
    }
    return 0;
  };

  // Funci√≥n para obtener el √∫ltimo valor v√°lido de mesada antes de una ca√≠da dr√°stica
  const obtenerValorMesadaValidoA√±o = (a√±o) => {
    const pagosA√±o = pagosFinales.filter(pago => {
      const a√±oPago = parseInt(pago.a√±o);
      return a√±oPago === a√±o;
    });

    if (pagosA√±o.length === 0) return obtenerPagoEnero(a√±o);

    // Ordenar pagos cronol√≥gicamente
    const pagosOrdenados = pagosA√±o.sort((a, b) => {
      const mesesMap = {
        ene: 1, enero: 1, feb: 2, febrero: 2, mar: 3, marzo: 3,
        abr: 4, abril: 4, may: 5, mayo: 5, jun: 6, junio: 6,
        jul: 7, julio: 7, ago: 8, agosto: 8, sep: 9, sept: 9, septiembre: 9,
        oct: 10, octubre: 10, nov: 11, noviembre: 11, dic: 12, diciembre: 12
      };

      const obtenerMes = (periodo) => {
        if (!periodo) return 1;
        const periodoLower = periodo.toLowerCase();
        for (let [key, valor] of Object.entries(mesesMap)) {
          if (periodoLower.includes(key)) return valor;
        }
        return 1;
      };

      return obtenerMes(a.periodoPago) - obtenerMes(b.periodoPago);
    });

    let valorMesadaAnterior = null;
    let ultimoValorValido = null;

    for (let i = 0; i < pagosOrdenados.length; i++) {
      const pago = pagosOrdenados[i];
      
      if (pago.detalles && Array.isArray(pago.detalles)) {
        const mesadaDetalle = pago.detalles.find(det => det.codigo === 'MESAD');
        if (mesadaDetalle && mesadaDetalle.ingresos > 0) {
          const valorMesadaActual = mesadaDetalle.ingresos;
          
          // Verificar si hay una ca√≠da dr√°stica (m√°s del 50%)
          if (valorMesadaAnterior !== null) {
            const porcentajeCaida = ((valorMesadaAnterior - valorMesadaActual) / valorMesadaAnterior) * 100;
            
            if (porcentajeCaida > 50) {
              // Retornar el √∫ltimo valor v√°lido antes de la ca√≠da
              return ultimoValorValido || valorMesadaAnterior;
            }
          }

          ultimoValorValido = valorMesadaActual;
          valorMesadaAnterior = valorMesadaActual;
        }
      }
    }

    // Si no hubo ca√≠das dr√°sticas, retornar el √∫ltimo valor encontrado o el pago de enero
    return ultimoValorValido || obtenerPagoEnero(a√±o);
  };

  // Funci√≥n para contar el n√∫mero de pagos recibidos en un a√±o espec√≠fico
  // IMPORTANTE: Se detiene cuando detecta una ca√≠da mayor al 50% en el valor de la mesada
  const contarPagosA√±o = (a√±o) => {
    const pagosA√±o = pagosFinales.filter(pago => {
      const a√±oPago = parseInt(pago.a√±o);
      return a√±oPago === a√±o;
    });

    if (pagosA√±o.length === 0) return 0;

    // Ordenar pagos cronol√≥gicamente para detectar ca√≠das dr√°sticas
    const pagosOrdenados = pagosA√±o.sort((a, b) => {
      const mesesMap = {
        ene: 1, enero: 1, feb: 2, febrero: 2, mar: 3, marzo: 3,
        abr: 4, abril: 4, may: 5, mayo: 5, jun: 6, junio: 6,
        jul: 7, julio: 7, ago: 8, agosto: 8, sep: 9, sept: 9, septiembre: 9,
        oct: 10, octubre: 10, nov: 11, noviembre: 11, dic: 12, diciembre: 12
      };

      const obtenerMes = (periodo) => {
        if (!periodo) return 1;
        const periodoLower = periodo.toLowerCase();
        for (let [key, valor] of Object.entries(mesesMap)) {
          if (periodoLower.includes(key)) return valor;
        }
        return 1;
      };

      return obtenerMes(a.periodoPago) - obtenerMes(b.periodoPago);
    });

    let totalMesadas = 0;
    let valorMesadaAnterior = null;

    for (let i = 0; i < pagosOrdenados.length; i++) {
      const pago = pagosOrdenados[i];
      let valorMesadaActual = 0;

      if (pago.detalles && Array.isArray(pago.detalles)) {
        // Buscar el valor de la mesada regular (MESAD)
        const mesadaDetalle = pago.detalles.find(det => det.codigo === 'MESAD');
        if (mesadaDetalle && mesadaDetalle.ingresos > 0) {
          valorMesadaActual = mesadaDetalle.ingresos;
          
          // Verificar si hay una ca√≠da dr√°stica (m√°s del 50%)
          if (valorMesadaAnterior !== null) {
            const porcentajeCaida = ((valorMesadaAnterior - valorMesadaActual) / valorMesadaAnterior) * 100;
            
            // Si la ca√≠da es mayor al 50%, DETENER el conteo aqu√≠
            if (porcentajeCaida > 50) {
              console.log(`üö® Ca√≠da dr√°stica detectada en ${a√±o}, per√≠odo "${pago.periodoPago}": ${porcentajeCaida.toFixed(2)}% - CORTANDO CONTEO`);
              break; // ‚ö†Ô∏è CRUCIAL: Salir del loop y no contar m√°s pagos
            }
          }

          totalMesadas += 1;
          valorMesadaAnterior = valorMesadaActual;
        }

        // Contar mesadas adicionales solo si no ha habido ca√≠da dr√°stica
        const mesadaAdicional = pago.detalles.find(det => 
          det.codigo && (
            det.codigo.includes('285') || // Mesada Adicional
            det.descripcion?.toLowerCase().includes('mesada adicional') ||
            det.descripcion?.toLowerCase().includes('prima') ||
            det.descripcion?.toLowerCase().includes('aguinaldo') ||
            det.nombre?.toLowerCase().includes('mesada adicional') ||
            det.nombre?.toLowerCase().includes('prima') ||
            det.nombre?.toLowerCase().includes('aguinaldo')
          )
        );
        
        if (mesadaAdicional && mesadaAdicional.ingresos > 0) {
          totalMesadas += 1;
        }
      }
    }

    // Si no hay detalles, usar m√©todo de respaldo
    if (totalMesadas === 0 && pagosOrdenados.length > 0) {
      return pagosOrdenados.length;
    }

    return totalMesadas;
  };

  // Funci√≥n para obtener informaci√≥n detallada de los pagos de un a√±o (para debugging)
  const obtenerDetallesPagosA√±o = (a√±o) => {
    const pagosA√±o = pagosFinales.filter(pago => {
      const a√±oPago = parseInt(pago.a√±o);
      return a√±oPago === a√±o;
    });

    console.log(`üìä Detalles para a√±o ${a√±o}: ${pagosA√±o.length} pagos √∫nicos por per√≠odo`);

    // Verificar si hay per√≠odos duplicados exactos incluso despu√©s de la deduplicaci√≥n global
    const periodosContados = {};
    const detallesConVerificacion = pagosA√±o.map((pago, index) => {
      const periodoExacto = pago.periodoPago?.trim() || 'sin-periodo';
      
      if (periodosContados[periodoExacto]) {
        periodosContados[periodoExacto]++;
        console.log(`‚ö†Ô∏è Per√≠odo exacto duplicado detectado en detalles ${a√±o}: "${pago.periodoPago}" (aparici√≥n #${periodosContados[periodoExacto]})`);
      } else {
        periodosContados[periodoExacto] = 1;
      }

      const conceptos = [];
      if (pago.detalles && Array.isArray(pago.detalles)) {
        pago.detalles.forEach(det => {
          if (det.ingresos > 0) {
            conceptos.push({
              codigo: det.codigo,
              descripcion: det.descripcion || det.nombre || 'Sin descripci√≥n',
              valor: det.ingresos
            });
          }
        });
      }
      
      return {
        periodo: pago.periodoPago,
        periodoExacto: periodoExacto,
        conceptos: conceptos,
        totalConceptos: conceptos.length,
        indiceOriginal: index
      };
    });

    // Mostrar resumen de duplicaciones por per√≠odo si las hay
    const duplicados = Object.entries(periodosContados).filter(([periodo, count]) => count > 1);
    if (duplicados.length > 0) {
      console.log(`üö® Per√≠odos exactos con m√∫ltiples entradas en ${a√±o}:`);
      duplicados.forEach(([periodo, count]) => {
        console.log(`  "${periodo}": ${count} entradas`);
      });
    } else {
      console.log(`‚úÖ Todos los per√≠odos en ${a√±o} son √∫nicos`);
    }

    // Mostrar lista de per√≠odos √∫nicos
    console.log(`üìù Per√≠odos √∫nicos encontrados en ${a√±o}:`);
    detallesConVerificacion.forEach((detalle, idx) => {
      console.log(`  ${idx + 1}. "${detalle.periodo}" (${detalle.conceptos.length} conceptos)`);
    });

    return detallesConVerificacion;
  };

  // Datos de la tabla 1 basados en la imagen
  const datosTabla1 = [
    { a√±o: 1999, smlmv: 236460, reajuste: 0.00, proyeccionMesada: 1609662, reajusteMesada: 0.00, ipc: 16.70, mesadaPagada: 1609662.00, reajusteIpc: 6.81, diferencias: 0, mesadas: 0.00, retroactivas: 0 },
    { a√±o: 2000, smlmv: 260100, reajuste: 10.00, proyeccionMesada: 1770628, reajusteMesada: 6.81, ipc: 9.23, mesadaPagada: 1758234.00, reajusteIpc: 6.76, diferencias: 12394, mesadas: 14.00, retroactivas: 173516 },
    { a√±o: 2001, smlmv: 286000, reajuste: 9.96, proyeccionMesada: 1946983, reajusteMesada: 6.81, ipc: 8.75, mesadaPagada: 1912079.00, reajusteIpc: 6.69, diferencias: 34904, mesadas: 14.00, retroactivas: 488656 },
    { a√±o: 2002, smlmv: 309000, reajuste: 8.04, proyeccionMesada: 2103520, reajusteMesada: 6.81, ipc: 7.65, mesadaPagada: 2058353.00, reajusteIpc: 6.66, diferencias: 45167, mesadas: 14.00, retroactivas: 632338 },
    { a√±o: 2003, smlmv: 332000, reajuste: 7.44, proyeccionMesada: 2260022, reajusteMesada: 6.81, ipc: 6.99, mesadaPagada: 2202232.00, reajusteIpc: 6.63, diferencias: 57790, mesadas: 14.00, retroactivas: 809060 },
    { a√±o: 2004, smlmv: 358000, reajuste: 7.83, proyeccionMesada: 2436982, reajusteMesada: 6.81, ipc: 6.49, mesadaPagada: 2345157.00, reajusteIpc: 6.55, diferencias: 91825, mesadas: 14.00, retroactivas: 1285550 },
    { a√±o: 2005, smlmv: 381500, reajuste: 6.56, proyeccionMesada: 2596848, reajusteMesada: 6.81, ipc: 5.50, mesadaPagada: 2474141.00, reajusteIpc: 6.49, diferencias: 122707, mesadas: 14.00, retroactivas: 1717898 },
    { a√±o: 2006, smlmv: 408000, reajuste: 6.95, proyeccionMesada: 2777329, reajusteMesada: 6.81, ipc: 4.85, mesadaPagada: 2594137.00, reajusteIpc: 6.36, diferencias: 183192, mesadas: 8.00, retroactivas: 1465536 },
    { a√±o: 2007, smlmv: 433700, reajuste: 6.30, proyeccionMesada: 2952301, reajusteMesada: 6.81, ipc: 4.48, mesadaPagada: 2607761.00, reajusteIpc: 6.01, diferencias: 344540, mesadas: 9.00, retroactivas: 3100860 }
  ];

  // Datos de SMLMV para a√±os posteriores a 2007 (para la tabla 3)
  const datosTabla3 = [
    { a√±o: 2008, smlmv: 461500, reajuste: 6.41 },
    { a√±o: 2009, smlmv: 496900, reajuste: 7.67 },
    { a√±o: 2010, smlmv: 515000, reajuste: 3.64 },
    { a√±o: 2011, smlmv: 535600, reajuste: 4.00 },
    { a√±o: 2012, smlmv: 566700, reajuste: 5.81 },
    { a√±o: 2013, smlmv: 589500, reajuste: 4.02 },
    { a√±o: 2014, smlmv: 616000, reajuste: 4.50 },
    { a√±o: 2015, smlmv: 644350, reajuste: 4.60 },
    { a√±o: 2016, smlmv: 689454, reajuste: 7.00 },
    { a√±o: 2017, smlmv: 737717, reajuste: 7.00 },
    { a√±o: 2018, smlmv: 781242, reajuste: 5.90 },
    { a√±o: 2019, smlmv: 828116, reajuste: 6.00 },
    { a√±o: 2020, smlmv: 877803, reajuste: 6.00 },
    { a√±o: 2021, smlmv: 908526, reajuste: 3.50 },
    { a√±o: 2022, smlmv: 1000000, reajuste: 10.10 },
    { a√±o: 2023, smlmv: 1160000, reajuste: 16.00 },
    { a√±o: 2024, smlmv: 1300000, reajuste: 12.00 },
    { a√±o: 2025, smlmv: 1423000, reajuste: 9.50 }
  ];

  // Funci√≥n para generar proyecci√≥n din√°mica para la tabla 1 (1999-2007)
  const generarProyeccionDinamicaTabla1 = () => {
    const primerPago1999 = obtenerPagoEnero(1999);
    
    // Si no hay pago de 1999, retornar null para indicar que no hay datos
    if (primerPago1999 <= 0) {
      return null;
    }

    let valorBaseAcumulado = primerPago1999;
    
    const datosConProyeccion = datosTabla1.map((row, index) => {
      if (index === 0) {
        // Para 1999, usar el valor real como proyecci√≥n
        const proyeccionCalculada = valorBaseAcumulado;
        const porcentajeSMLMV = (proyeccionCalculada / row.smlmv);
        
        return {
          ...row,
          proyeccionMesadaDinamica: proyeccionCalculada,
          porcentajeSMLMVDinamico: porcentajeSMLMV,
          numeroPagosReales: contarPagosA√±o(row.a√±o)
        };
      } else {
        // Para a√±os siguientes, aplicar el reajuste acumulativo
        const reajustePorcentaje = row.reajuste / 100;
        valorBaseAcumulado = valorBaseAcumulado * (1 + reajustePorcentaje);
        const porcentajeSMLMV = (valorBaseAcumulado / row.smlmv);
        
        return {
          ...row,
          proyeccionMesadaDinamica: valorBaseAcumulado,
          porcentajeSMLMVDinamico: porcentajeSMLMV,
          numeroPagosReales: contarPagosA√±o(row.a√±o)
        };
      }
    });

    return datosConProyeccion;
  };

  // Funci√≥n para generar proyecci√≥n din√°mica para la tabla 3 (continuaci√≥n directa desde donde se cort√≥ la tabla 1)
  const generarProyeccionDinamicaTabla3 = () => {
    const datosTabla1Calculados = generarProyeccionDinamicaTabla1();
    
    // Si no hay datos de la tabla 1, no podemos continuar
    if (!datosTabla1Calculados) {
      return null;
    }

    // Obtener el √∫ltimo valor de la tabla 1 (2007)
    const ultimoValorTabla1 = datosTabla1Calculados[datosTabla1Calculados.length - 1].proyeccionMesadaDinamica;
    let valorBaseAcumulado = ultimoValorTabla1;

    // Funci√≥n para encontrar el punto exacto donde se cort√≥ la tabla 1 y contar mesadas faltantes
    const encontrarPuntoCorteYMesadasFaltantes = () => {
      // Buscar en todos los a√±os de la tabla 1 donde pudo haberse cortado
      for (let a√±o = 1999; a√±o <= 2007; a√±o++) {
        const pagosA√±o = pagosFinales.filter(pago => {
          const a√±oPago = parseInt(pago.a√±o);
          return a√±oPago === a√±o;
        });

        if (pagosA√±o.length === 0) continue;

        // Ordenar pagos cronol√≥gicamente
        const pagosOrdenados = pagosA√±o.sort((a, b) => {
          const mesesMap = {
            ene: 1, enero: 1, feb: 2, febrero: 2, mar: 3, marzo: 3,
            abr: 4, abril: 4, may: 5, mayo: 5, jun: 6, junio: 6,
            jul: 7, julio: 7, ago: 8, agosto: 8, sep: 9, sept: 9, septiembre: 9,
            oct: 10, octubre: 10, nov: 11, noviembre: 11, dic: 12, diciembre: 12
          };

          const obtenerMes = (periodo) => {
            if (!periodo) return 1;
            const periodoLower = periodo.toLowerCase();
            for (let [key, valor] of Object.entries(mesesMap)) {
              if (periodoLower.includes(key)) return valor;
            }
            return 1;
          };

          return obtenerMes(a.periodoPago) - obtenerMes(b.periodoPago);
        });

        let valorMesadaAnterior = null;
        
        for (let i = 0; i < pagosOrdenados.length; i++) {
          const pago = pagosOrdenados[i];
          
          if (pago.detalles && Array.isArray(pago.detalles)) {
            const mesadaDetalle = pago.detalles.find(det => det.codigo === 'MESAD');
            if (mesadaDetalle && mesadaDetalle.ingresos > 0) {
              const valorMesadaActual = mesadaDetalle.ingresos;
              
              // Verificar si hay una ca√≠da dr√°stica (m√°s del 50%)
              if (valorMesadaAnterior !== null) {
                const porcentajeCaida = ((valorMesadaAnterior - valorMesadaActual) / valorMesadaAnterior) * 100;
                
                if (porcentajeCaida > 50) {
                  console.log(`üéØ Punto de corte encontrado en ${a√±o}: ${pago.periodoPago} - Ca√≠da ${porcentajeCaida.toFixed(2)}%`);
                  
                  // Calcular cu√°ntas mesadas faltan en el a√±o (desde este pago hasta diciembre)
                  const mesadasFaltantes = pagosOrdenados.length - i;
                  const primerPagoConDescuento = pagosOrdenados[i];
                  
                  console.log(`üìä Mesadas faltantes en ${a√±o}: ${mesadasFaltantes} (desde ${primerPagoConDescuento.periodoPago})`);
                  
                  return {
                    a√±oCorte: a√±o,
                    indiceCorte: i,
                    mesadasFaltantes: mesadasFaltantes,
                    valorPrimerPagoConDescuento: valorMesadaActual,
                    periodoPrimerPagoConDescuento: primerPagoConDescuento.periodoPago,
                    datosA√±o: datosTabla1.find(d => d.a√±o === a√±o) || datosTabla3.find(d => d.a√±o === a√±o)
                  };
                }
              }
              valorMesadaAnterior = valorMesadaActual;
            }
          }
        }
      }
      
      console.log('üîç No se encontr√≥ punto de corte en a√±os 1999-2007');
      return null;
    };

    const puntoCorte = encontrarPuntoCorteYMesadasFaltantes();
    
    // Recopilar todos los pagos para la tabla 3
    const pagosTabla3 = [];
    
    if (puntoCorte && puntoCorte.datosA√±o) {
      // 1. Agregar una sola fila para el a√±o donde se cort√≥ con las mesadas faltantes
      pagosTabla3.push({
        a√±o: puntoCorte.a√±oCorte,
        smlmv: puntoCorte.datosA√±o.smlmv,
        reajuste: puntoCorte.datosA√±o.reajuste,
        valorReal: puntoCorte.valorPrimerPagoConDescuento,
        esContinuacion: true,
        mesadasFaltantes: puntoCorte.mesadasFaltantes,
        periodoInicio: puntoCorte.periodoPrimerPagoConDescuento
      });
    }

    // 2. Agregar pagos de a√±os posteriores al corte
    const a√±osPosteriores = new Set();
    
    pagosFinales.forEach(pago => {
      const a√±oPago = parseInt(pago.a√±o);
      const a√±oCorte = puntoCorte ? puntoCorte.a√±oCorte : 2007;
      
      if (a√±oPago > a√±oCorte && !a√±osPosteriores.has(a√±oPago)) {
        const pagosDelA√±o = contarPagosA√±o(a√±oPago);
        if (pagosDelA√±o > 0) {
          a√±osPosteriores.add(a√±oPago);
          
          // Encontrar el SMLMV correspondiente
          const datosA√±o = datosTabla3.find(d => d.a√±o === a√±oPago);
          if (datosA√±o) {
            pagosTabla3.push({
              a√±o: a√±oPago,
              smlmv: datosA√±o.smlmv,
              reajuste: datosA√±o.reajuste,
              valorReal: obtenerValorMesadaValidoA√±o(a√±oPago),
              esContinuacion: false,
              numeroPagos: pagosDelA√±o
            });
          }
        }
      }
    });

    // Ordenar por a√±o
    pagosTabla3.sort((a, b) => a.a√±o - b.a√±o);

    if (pagosTabla3.length === 0) {
      return [];
    }

    // Generar proyecci√≥n din√°mica
    const datosConProyeccion = pagosTabla3.map((row, index) => {
      // Para continuaciones del a√±o de corte, no aplicar reajuste adicional
      if (row.esContinuacion && index === 0) {
        // Primer pago de continuaci√≥n, mantener el valor base
        const porcentajeSMLMV = (valorBaseAcumulado / row.smlmv);
        
        return {
          ...row,
          proyeccionMesadaDinamica: valorBaseAcumulado,
          porcentajeSMLMVDinamico: porcentajeSMLMV,
          numeroPagosReales: row.mesadasFaltantes
        };
      } else {
        // Para a√±os nuevos, aplicar reajuste acumulativo
        const reajustePorcentaje = row.reajuste / 100;
        valorBaseAcumulado = valorBaseAcumulado * (1 + reajustePorcentaje);
        const porcentajeSMLMV = (valorBaseAcumulado / row.smlmv);
        
        return {
          ...row,
          proyeccionMesadaDinamica: valorBaseAcumulado,
          porcentajeSMLMVDinamico: porcentajeSMLMV,
          numeroPagosReales: row.numeroPagos || contarPagosA√±o(row.a√±o)
        };
      }
    });

    return datosConProyeccion;
  };

  // Calcular los datos con proyecci√≥n din√°mica para ambas tablas
  const datosConProyeccionTabla1 = generarProyeccionDinamicaTabla1();
  const datosConProyeccionTabla3 = generarProyeccionDinamicaTabla3();

  // Si no hay datos reales, mostrar mensaje
  if (!datosConProyeccionTabla1) {
    return (
      <div className="anexo2-container">
        <h2>PROYECCI√ìN COMPARATIVA DE LA MESADA CONVENCIONAL CON INCREMENTOS DE SMLMV E IPC</h2>
        
        {/* Informaci√≥n del usuario seleccionado */}
        {usuarioSeleccionado && (
          <div className="usuario-info-anexo2">
            <div className="info-item">
              <span className="label">C√©dula:</span>
              <span className="value">{usuarioSeleccionado.documento}</span>
            </div>
            <div className="info-item">
              <span className="label">Nombre:</span>
              <span className="value">{usuarioSeleccionado.nombre}</span>
            </div>
          </div>
        )}
        
        <div className="sin-datos-mensaje">
          <div className="alerta-sin-datos">
            <h3>‚ö†Ô∏è No hay datos de pagos disponibles</h3>
            <p>Para generar la proyecci√≥n comparativa es necesario tener al menos un registro de pago del a√±o 1999 (o a√±o inicial de la pensi√≥n).</p>
            <p>Este usuario no tiene registros de pagos en el sistema, por lo que no es posible calcular las proyecciones din√°micas.</p>
            <p><strong>Por favor contacte al administrador para cargar los datos de pagos hist√≥ricos.</strong></p>
          </div>
        </div>
      </div>
    );
  }

  const formatearNumero = (valor) => {
    if (valor === 0 || valor === null || valor === undefined) {
      return 'N/D'; // No Disponible
    }
    return new Intl.NumberFormat('es-CO').format(valor);
  };

  const formatearPagoReal = (valor) => {
    if (valor === 0 || valor === null || valor === undefined) {
      return 'Sin registro';
    }
    return new Intl.NumberFormat('es-CO', {
      style: 'currency',
      currency: 'COP',
      minimumFractionDigits: 0,
      maximumFractionDigits: 0
    }).format(valor);
  };

  return (
    <div className="anexo2-container">
      <h2>PROYECCI√ìN COMPARATIVA DE LA MESADA CONVENCIONAL CON INCREMENTOS DE SMLMV E IPC</h2>
      
      {/* Informaci√≥n del usuario seleccionado */}
      {usuarioSeleccionado && (
        <div className="usuario-info-anexo2">
          <div className="info-item">
            <span className="label">C√©dula:</span>
            <span className="value">{usuarioSeleccionado.documento}</span>
          </div>
          <div className="info-item">
            <span className="label">Nombre:</span>
            <span className="value">{usuarioSeleccionado.nombre}</span>
          </div>
        </div>
      )}
      
      <div className="tabla-container">
        <table className="tabla-anexo2">
          <thead>
            <tr>
              <th rowSpan={2}>A√±o</th>
              <th rowSpan={2}>SMLMV</th>
              <th rowSpan={2}>Pago Real Enero (Sistema)</th>
              <th colSpan={2}>Proyecci√≥n de Mesada Fiduprevisora</th>
              <th rowSpan={2}># Reajuste en % con SMLMV (Din√°mico)</th>
              <th rowSpan={2}>Mesada Pagada Fiduprevisora reajustada con IPCs</th>
              <th rowSpan={2}># de SMLMV (En el Reajuste x IPCs)</th>
              <th rowSpan={2}>Diferencias de Mesadas</th>
              <th rowSpan={2}># de Mesadas</th>
              <th rowSpan={2}>Total Retroactivas</th>
            </tr>
            <tr>
              <th>Reajuste %</th>
              <th>SMLMV (Proyecci√≥n Din√°mica desde 1999)</th>
            </tr>
          </thead>
          <tbody>
            {datosConProyeccionTabla1.map((row, index) => {
              // Obtener el valor real pagado v√°lido (considerando ca√≠das dr√°sticas)
              const valorPagoReal = obtenerValorMesadaValidoA√±o(row.a√±o);
              const mesadaPagadaIPCs = valorPagoReal;
              const smlmvEnReajuste = mesadaPagadaIPCs > 0 ? (mesadaPagadaIPCs / row.smlmv) : 0;
              
              // Usar el n√∫mero real de pagos del a√±o (cortado por ca√≠das dr√°sticas)
              const numeroPagosReales = contarPagosA√±o(row.a√±o);
              
              // C√°lculos de diferencias y retroactivas
              const diferenciaMesadas = row.proyeccionMesadaDinamica - mesadaPagadaIPCs;
              const retroactivasCalculadas = diferenciaMesadas * numeroPagosReales;
              
              return (
                <tr key={index}>
                  <td>{row.a√±o}</td>
                  <td>{formatearNumero(row.smlmv)}</td>
                  <td>{formatearPagoReal(valorPagoReal)}</td>
                  <td>{row.reajuste.toFixed(2)}</td>
                  <td>{formatearNumero(Math.round(row.proyeccionMesadaDinamica))}</td>
                  <td>{row.porcentajeSMLMVDinamico.toFixed(2)}</td>
                  <td>{formatearPagoReal(mesadaPagadaIPCs)}</td>
                  <td>{smlmvEnReajuste.toFixed(2)}</td>
                  <td>{formatearNumero(Math.round(diferenciaMesadas))}</td>
                  <td>{numeroPagosReales}</td>
                  <td>{formatearNumero(Math.round(retroactivasCalculadas))}</td>
                </tr>
              );
            })}
          </tbody>
          <tfoot>
            <tr className="total-row">
              <td colSpan={10}><strong>TOTAL</strong></td>
              <td><strong>{formatearNumero(Math.round(datosConProyeccionTabla1.reduce((total, row) => {
                const valorPagoReal = obtenerValorMesadaValidoA√±o(row.a√±o);
                const diferenciaMesadas = row.proyeccionMesadaDinamica - valorPagoReal;
                const numeroPagosReales = contarPagosA√±o(row.a√±o);
                return total + (diferenciaMesadas * numeroPagosReales);
              }, 0)))}</strong></td>
            </tr>
          </tfoot>
        </table>
      </div>

      {/* Nueva tabla de compartici√≥n de la mesada */}
      <div className="tabla-container" style={{marginTop: '30px'}}>
        <h3 style={{
          textAlign: 'center',
          color: '#333',
          fontSize: '1.2rem',
          marginBottom: '15px',
          padding: '10px',
          backgroundColor: '#f8f9fa',
          borderRadius: '5px',
          borderLeft: '4px solid #007bff'
        }}>
          2. COMPARTICION DE LA MESADA REAJUSTADA AS√ç:
        </h3>
        
        <table className="tabla-anexo2" style={{fontSize: '13px'}}>
          <tbody>
            <tr>
              <td style={{
                backgroundColor: '#e9ecef',
                fontWeight: 'bold',
                textAlign: 'left',
                padding: '12px',
                borderRight: '2px solid #007bff'
              }}>
                MESADA PLENA DE LA PENSION CONVENCIONAL ANTES DE LA COMPARTICION
              </td>
              <td style={{
                backgroundColor: '#f8f9fa',
                fontWeight: 'bold',
                textAlign: 'right',
                padding: '12px'
              }}>
                {formatearNumero(Math.round(datosConProyeccionTabla1[datosConProyeccionTabla1.length - 1]?.proyeccionMesadaDinamica || 2952301))}
              </td>
              <td style={{
                backgroundColor: '#f8f9fa',
                fontWeight: 'bold',
                textAlign: 'center',
                padding: '12px'
              }}>
                100.00 %
              </td>
            </tr>
            <tr>
              <td colSpan={3} style={{
                backgroundColor: '#d4edda',
                fontWeight: 'bold',
                textAlign: 'center',
                padding: '10px',
                color: '#155724'
              }}>
                CUOTAS PARTES EN QUE SE DISTRIBUYE EL MONTO DE MESADA PENSIONAL A PARTIR DE LA COMPARTICION
              </td>
            </tr>
            <tr>
              <td style={{
                backgroundColor: '#fff3cd',
                fontWeight: '500',
                textAlign: 'left',
                padding: '12px',
                paddingLeft: '30px'
              }}>
                MESADA RECONOCIDA POR COLPENSIONES
              </td>
              <td style={{
                backgroundColor: '#fff3cd',
                fontWeight: 'bold',
                textAlign: 'right',
                padding: '12px',
                color: '#856404'
              }}>
                {(() => {
                  const mesadaPlena = datosConProyeccionTabla1[datosConProyeccionTabla1.length - 1]?.proyeccionMesadaDinamica || 2952301;
                  const mesadaPagadaConIPCs = datosConProyeccionTabla1[datosConProyeccionTabla1.length - 1]?.mesadaPagadaConIPC || 2607761;
                  
                  // Calcular valor despu√©s del descuento ‚â•50%
                  const calcularValorDespuesCaida = () => {
                    // Buscar pagos de 2007 para encontrar la ca√≠da dr√°stica
                    const pagos2007 = pagosFinales.filter(pago => pago.a√±o === 2007);
                    if (pagos2007.length === 0) return 1014335; // valor por defecto del ejemplo
                    
                    // Ordenar por mes
                    const pagosOrdenados = pagos2007.sort((a, b) => {
                      const mesesMap = {
                        ene: 1, enero: 1, feb: 2, febrero: 2, mar: 3, marzo: 3,
                        abr: 4, abril: 4, may: 5, mayo: 5, jun: 6, junio: 6,
                        jul: 7, julio: 7, ago: 8, agosto: 8, sep: 9, sept: 9, septiembre: 9,
                        oct: 10, octubre: 10, nov: 11, noviembre: 11, dic: 12, diciembre: 12
                      };

                      const obtenerMes = (periodo) => {
                        if (!periodo) return 1;
                        const periodoLower = periodo.toLowerCase();
                        for (let [key, valor] of Object.entries(mesesMap)) {
                          if (periodoLower.includes(key)) return valor;
                        }
                        return 1;
                      };

                      return obtenerMes(a.periodoPago) - obtenerMes(b.periodoPago);
                    });
                    
                    // Buscar la ca√≠da dr√°stica
                    let valorAnterior = null;
                    for (let i = 0; i < pagosOrdenados.length; i++) {
                      const pago = pagosOrdenados[i];
                      if (pago.detalles && Array.isArray(pago.detalles)) {
                        const mesadaDetalle = pago.detalles.find(det => det.codigo === 'MESAD');
                        if (mesadaDetalle && mesadaDetalle.ingresos > 0) {
                          const valorActual = mesadaDetalle.ingresos;
                          
                          if (valorAnterior !== null) {
                            const porcentajeCaida = ((valorAnterior - valorActual) / valorAnterior) * 100;
                            if (porcentajeCaida >= 50) {
                              return valorActual; // Retorna el valor despu√©s de la ca√≠da
                            }
                          }
                          valorAnterior = valorActual;
                        }
                      }
                    }
                    
                    return 1014335; // valor por defecto del ejemplo si no encuentra ca√≠da
                  };
                  
                  // Calcular valor de la empresa
                  const diferencia = mesadaPlena - mesadaPagadaConIPCs;
                  const valorDespuesCaida = calcularValorDespuesCaida();
                  const valorEmpresa = diferencia + valorDespuesCaida;
                  
                  // Colpensiones es lo que resta despu√©s del valor de la empresa
                  const valorColpensiones = mesadaPlena - valorEmpresa;
                  
                  return formatearNumero(Math.round(valorColpensiones));
                })()}
              </td>
              <td style={{
                backgroundColor: '#fff3cd',
                fontWeight: 'bold',
                textAlign: 'center',
                padding: '12px',
                color: '#856404'
              }}>
                {(() => {
                  const mesadaPlena = datosConProyeccionTabla1[datosConProyeccionTabla1.length - 1]?.proyeccionMesadaDinamica || 2952301;
                  const mesadaPagadaConIPCs = datosConProyeccionTabla1[datosConProyeccionTabla1.length - 1]?.mesadaPagadaConIPC || 2607761;
                  
                  // Calcular valor despu√©s del descuento ‚â•50%
                  const calcularValorDespuesCaida = () => {
                    // Buscar pagos de 2007 para encontrar la ca√≠da dr√°stica
                    const pagos2007 = pagosFinales.filter(pago => pago.a√±o === 2007);
                    if (pagos2007.length === 0) return 1014335; // valor por defecto del ejemplo
                    
                    // Ordenar por mes
                    const pagosOrdenados = pagos2007.sort((a, b) => {
                      const mesesMap = {
                        ene: 1, enero: 1, feb: 2, febrero: 2, mar: 3, marzo: 3,
                        abr: 4, abril: 4, may: 5, mayo: 5, jun: 6, junio: 6,
                        jul: 7, julio: 7, ago: 8, agosto: 8, sep: 9, sept: 9, septiembre: 9,
                        oct: 10, octubre: 10, nov: 11, noviembre: 11, dic: 12, diciembre: 12
                      };

                      const obtenerMes = (periodo) => {
                        if (!periodo) return 1;
                        const periodoLower = periodo.toLowerCase();
                        for (let [key, valor] of Object.entries(mesesMap)) {
                          if (periodoLower.includes(key)) return valor;
                        }
                        return 1;
                      };

                      return obtenerMes(a.periodoPago) - obtenerMes(b.periodoPago);
                    });
                    
                    // Buscar la ca√≠da dr√°stica
                    let valorAnterior = null;
                    for (let i = 0; i < pagosOrdenados.length; i++) {
                      const pago = pagosOrdenados[i];
                      if (pago.detalles && Array.isArray(pago.detalles)) {
                        const mesadaDetalle = pago.detalles.find(det => det.codigo === 'MESAD');
                        if (mesadaDetalle && mesadaDetalle.ingresos > 0) {
                          const valorActual = mesadaDetalle.ingresos;
                          
                          if (valorAnterior !== null) {
                            const porcentajeCaida = ((valorAnterior - valorActual) / valorAnterior) * 100;
                            if (porcentajeCaida >= 50) {
                              return valorActual; // Retorna el valor despu√©s de la ca√≠da
                            }
                          }
                          valorAnterior = valorActual;
                        }
                      }
                    }
                    
                    return 1014335; // valor por defecto del ejemplo si no encuentra ca√≠da
                  };
                  
                  // Calcular valor de la empresa
                  const diferencia = mesadaPlena - mesadaPagadaConIPCs;
                  const valorDespuesCaida = calcularValorDespuesCaida();
                  const valorEmpresa = diferencia + valorDespuesCaida;
                  
                  // Porcentaje de Colpensiones es lo que resta del 100%
                  const porcentajeColpensiones = ((mesadaPlena - valorEmpresa) / mesadaPlena) * 100;
                  
                  return porcentajeColpensiones.toFixed(2) + ' %';
                })()}
              </td>
            </tr>
            <tr>
              <td style={{
                backgroundColor: '#f8d7da',
                fontWeight: '500',
                textAlign: 'left',
                padding: '12px',
                paddingLeft: '30px'
              }}>
                MAYOR VALOR A CARGO DE LA EMPRESA
              </td>
              <td style={{
                backgroundColor: '#f8d7da',
                fontWeight: 'bold',
                textAlign: 'right',
                padding: '12px',
                color: '#721c24'
              }}>
                {(() => {
                  const mesadaPlena = datosConProyeccionTabla1[datosConProyeccionTabla1.length - 1]?.proyeccionMesadaDinamica || 2952301;
                  const mesadaPagadaConIPCs = datosConProyeccionTabla1[datosConProyeccionTabla1.length - 1]?.mesadaPagadaConIPC || 2607761;
                  
                  // Calcular valor despu√©s del descuento ‚â•50%
                  const calcularValorDespuesCaida = () => {
                    // Buscar pagos de 2007 para encontrar la ca√≠da dr√°stica
                    const pagos2007 = pagosFinales.filter(pago => pago.a√±o === 2007);
                    if (pagos2007.length === 0) return 1014335; // valor por defecto del ejemplo
                    
                    // Ordenar por mes
                    const pagosOrdenados = pagos2007.sort((a, b) => {
                      const mesesMap = {
                        ene: 1, enero: 1, feb: 2, febrero: 2, mar: 3, marzo: 3,
                        abr: 4, abril: 4, may: 5, mayo: 5, jun: 6, junio: 6,
                        jul: 7, julio: 7, ago: 8, agosto: 8, sep: 9, sept: 9, septiembre: 9,
                        oct: 10, octubre: 10, nov: 11, noviembre: 11, dic: 12, diciembre: 12
                      };

                      const obtenerMes = (periodo) => {
                        if (!periodo) return 1;
                        const periodoLower = periodo.toLowerCase();
                        for (let [key, valor] of Object.entries(mesesMap)) {
                          if (periodoLower.includes(key)) return valor;
                        }
                        return 1;
                      };

                      return obtenerMes(a.periodoPago) - obtenerMes(b.periodoPago);
                    });
                    
                    // Buscar la ca√≠da dr√°stica
                    let valorAnterior = null;
                    for (let i = 0; i < pagosOrdenados.length; i++) {
                      const pago = pagosOrdenados[i];
                      if (pago.detalles && Array.isArray(pago.detalles)) {
                        const mesadaDetalle = pago.detalles.find(det => det.codigo === 'MESAD');
                        if (mesadaDetalle && mesadaDetalle.ingresos > 0) {
                          const valorActual = mesadaDetalle.ingresos;
                          
                          if (valorAnterior !== null) {
                            const porcentajeCaida = ((valorAnterior - valorActual) / valorAnterior) * 100;
                            if (porcentajeCaida >= 50) {
                              return valorActual; // Retorna el valor despu√©s de la ca√≠da
                            }
                          }
                          valorAnterior = valorActual;
                        }
                      }
                    }
                    
                    return 1014335; // valor por defecto del ejemplo si no encuentra ca√≠da
                  };
                  
                  // Nueva f√≥rmula: (SMLMV Proyecci√≥n Din√°mica - Mesada Pagada con IPCs) + valor despu√©s del descuento ‚â•50%
                  const diferencia = mesadaPlena - mesadaPagadaConIPCs;
                  const valorDespuesCaida = calcularValorDespuesCaida();
                  const valorEmpresa = diferencia + valorDespuesCaida;
                  
                  return formatearNumero(Math.round(valorEmpresa));
                })()}
              </td>
              <td style={{
                backgroundColor: '#f8d7da',
                fontWeight: 'bold',
                textAlign: 'center',
                padding: '12px',
                color: '#721c24'
              }}>
                {(() => {
                  const mesadaPlena = datosConProyeccionTabla1[datosConProyeccionTabla1.length - 1]?.proyeccionMesadaDinamica || 2952301;
                  const mesadaPagadaConIPCs = datosConProyeccionTabla1[datosConProyeccionTabla1.length - 1]?.mesadaPagadaConIPC || 2607761;
                  
                  // Calcular valor despu√©s del descuento ‚â•50%
                  const calcularValorDespuesCaida = () => {
                    // Buscar pagos de 2007 para encontrar la ca√≠da dr√°stica
                    const pagos2007 = pagosFinales.filter(pago => pago.a√±o === 2007);
                    if (pagos2007.length === 0) return 1014335; // valor por defecto del ejemplo
                    
                    // Ordenar por mes
                    const pagosOrdenados = pagos2007.sort((a, b) => {
                      const mesesMap = {
                        ene: 1, enero: 1, feb: 2, febrero: 2, mar: 3, marzo: 3,
                        abr: 4, abril: 4, may: 5, mayo: 5, jun: 6, junio: 6,
                        jul: 7, julio: 7, ago: 8, agosto: 8, sep: 9, sept: 9, septiembre: 9,
                        oct: 10, octubre: 10, nov: 11, noviembre: 11, dic: 12, diciembre: 12
                      };

                      const obtenerMes = (periodo) => {
                        if (!periodo) return 1;
                        const periodoLower = periodo.toLowerCase();
                        for (let [key, valor] of Object.entries(mesesMap)) {
                          if (periodoLower.includes(key)) return valor;
                        }
                        return 1;
                      };

                      return obtenerMes(a.periodoPago) - obtenerMes(b.periodoPago);
                    });
                    
                    // Buscar la ca√≠da dr√°stica
                    let valorAnterior = null;
                    for (let i = 0; i < pagosOrdenados.length; i++) {
                      const pago = pagosOrdenados[i];
                      if (pago.detalles && Array.isArray(pago.detalles)) {
                        const mesadaDetalle = pago.detalles.find(det => det.codigo === 'MESAD');
                        if (mesadaDetalle && mesadaDetalle.ingresos > 0) {
                          const valorActual = mesadaDetalle.ingresos;
                          
                          if (valorAnterior !== null) {
                            const porcentajeCaida = ((valorAnterior - valorActual) / valorAnterior) * 100;
                            if (porcentajeCaida >= 50) {
                              return valorActual; // Retorna el valor despu√©s de la ca√≠da
                            }
                          }
                          valorAnterior = valorActual;
                        }
                      }
                    }
                    
                    return 1014335; // valor por defecto del ejemplo si no encuentra ca√≠da
                  };
                  
                  // Nueva f√≥rmula: (SMLMV Proyecci√≥n Din√°mica - Mesada Pagada con IPCs) + valor despu√©s del descuento ‚â•50%
                  const diferencia = mesadaPlena - mesadaPagadaConIPCs;
                  const valorDespuesCaida = calcularValorDespuesCaida();
                  const valorEmpresa = diferencia + valorDespuesCaida;
                  const porcentajeEmpresa = (valorEmpresa / mesadaPlena) * 100;
                  
                  return porcentajeEmpresa.toFixed(2) + ' %';
                })()}
              </td>
            </tr>
          </tbody>
        </table>
      </div>

      {/* Tercera tabla - Continuaci√≥n desde 2008 en adelante */}
      {datosConProyeccionTabla3 && datosConProyeccionTabla3.length > 0 && (
        <div className="tabla-container" style={{marginTop: '30px'}}>
          <h3 style={{
            textAlign: 'center',
            color: '#333',
            fontSize: '1.2rem',
            marginBottom: '15px',
            padding: '10px',
            backgroundColor: '#f8f9fa',
            borderRadius: '5px',
            borderLeft: '4px solid #28a745'
          }}>
            3. PROYECCI√ìN COMPARATIVA CONTINUADA DESDE 2008 EN ADELANTE
          </h3>
          
          <table className="tabla-anexo2">
            <thead>
              <tr>
                <th rowSpan={2}>A√±o</th>
                <th rowSpan={2}>SMLMV</th>
                <th rowSpan={2}>Pago Real Enero (Sistema)</th>
                <th colSpan={2}>Proyecci√≥n de Mesada Fiduprevisora</th>
                <th rowSpan={2}># Reajuste en % con SMLMV (Din√°mico)</th>
                <th rowSpan={2}>Mesada Pagada Fiduprevisora reajustada con IPCs</th>
                <th rowSpan={2}># de SMLMV (En el Reajuste x IPCs)</th>
                <th rowSpan={2}>Diferencias de Mesadas</th>
                <th rowSpan={2}># de Mesadas</th>
                <th rowSpan={2}>Total Retroactivas</th>
              </tr>
              <tr>
                <th>Reajuste %</th>
                <th>SMLMV (Proyecci√≥n Din√°mica desde 2007)</th>
              </tr>
            </thead>
            <tbody>
              {datosConProyeccionTabla3.map((row, index) => {
                // Si es una continuaci√≥n del a√±o de corte, usar datos espec√≠ficos del corte
                let valorPagoReal, numeroPagosReales, a√±oMostrar;
                
                if (row.esContinuacion) {
                  valorPagoReal = row.valorReal;
                  numeroPagosReales = row.mesadasFaltantes;
                  a√±oMostrar = `${row.a√±o} (desde ${row.periodoInicio})`;
                } else {
                  valorPagoReal = obtenerValorMesadaValidoA√±o(row.a√±o);
                  numeroPagosReales = contarPagosA√±o(row.a√±o);
                  a√±oMostrar = row.a√±o;
                }
                
                const mesadaPagadaIPCs = valorPagoReal;
                const smlmvEnReajuste = mesadaPagadaIPCs > 0 ? (mesadaPagadaIPCs / row.smlmv) : 0;
                
                // C√°lculos de diferencias y retroactivas
                const diferenciaMesadas = row.proyeccionMesadaDinamica - mesadaPagadaIPCs;
                const retroactivasCalculadas = diferenciaMesadas * numeroPagosReales;
                
                return (
                  <tr key={`${row.a√±o}-${index}`} style={{
                    backgroundColor: row.esContinuacion ? '#fff3cd' : 'transparent'
                  }}>
                    <td>
                      {a√±oMostrar}
                      {row.esContinuacion && (
                        <small style={{display: 'block', color: '#856404', fontSize: '0.8em'}}>
                          Continuaci√≥n directa
                        </small>
                      )}
                    </td>
                    <td>{formatearNumero(row.smlmv)}</td>
                    <td>{formatearPagoReal(valorPagoReal)}</td>
                    <td>{row.reajuste.toFixed(2)}</td>
                    <td>{formatearNumero(Math.round(row.proyeccionMesadaDinamica))}</td>
                    <td>{row.porcentajeSMLMVDinamico.toFixed(2)}</td>
                    <td>{formatearPagoReal(mesadaPagadaIPCs)}</td>
                    <td>{smlmvEnReajuste.toFixed(2)}</td>
                    <td>{formatearNumero(Math.round(diferenciaMesadas))}</td>
                    <td>
                      {numeroPagosReales}
                      {row.esContinuacion && (
                        <small style={{display: 'block', color: '#856404', fontSize: '0.8em'}}>
                          (mesadas faltantes)
                        </small>
                      )}
                    </td>
                    <td>{formatearNumero(Math.round(retroactivasCalculadas))}</td>
                  </tr>
                );
              })}
            </tbody>
            <tfoot>
              <tr className="total-row">
                <td colSpan={10}><strong>TOTAL TABLA 3</strong></td>
                <td><strong>{formatearNumero(Math.round(datosConProyeccionTabla3.reduce((total, row) => {
                  let valorPagoReal, numeroPagosReales;
                  
                  if (row.esContinuacion) {
                    valorPagoReal = row.valorReal;
                    numeroPagosReales = row.mesadasFaltantes;
                  } else {
                    valorPagoReal = obtenerValorMesadaValidoA√±o(row.a√±o);
                    numeroPagosReales = contarPagosA√±o(row.a√±o);
                  }
                  
                  const diferenciaMesadas = row.proyeccionMesadaDinamica - valorPagoReal;
                  return total + (diferenciaMesadas * numeroPagosReales);
                }, 0)))}</strong></td>
              </tr>
            </tfoot>
          </table>

          {/* Total general de ambas tablas */}
          <div style={{
            marginTop: '20px',
            padding: '15px',
            backgroundColor: '#d4edda',
            borderRadius: '5px',
            borderLeft: '4px solid #28a745'
          }}>
            <h4 style={{margin: '0 0 10px 0', color: '#155724'}}>
              TOTAL GENERAL (TABLA 1 + TABLA 3):
            </h4>
            <div style={{fontSize: '1.1rem', fontWeight: 'bold', color: '#155724'}}>
              {formatearNumero(Math.round(
                datosConProyeccionTabla1.reduce((total, row) => {
                  const valorPagoReal = obtenerValorMesadaValidoA√±o(row.a√±o);
                  const diferenciaMesadas = row.proyeccionMesadaDinamica - valorPagoReal;
                  const numeroPagosReales = contarPagosA√±o(row.a√±o);
                  return total + (diferenciaMesadas * numeroPagosReales);
                }, 0) +
                datosConProyeccionTabla3.reduce((total, row) => {
                  let valorPagoReal, numeroPagosReales;
                  
                  if (row.esContinuacion) {
                    valorPagoReal = row.valorReal;
                    numeroPagosReales = row.mesadasFaltantes;
                  } else {
                    valorPagoReal = obtenerValorMesadaValidoA√±o(row.a√±o);
                    numeroPagosReales = contarPagosA√±o(row.a√±o);
                  }
                  
                  const diferenciaMesadas = row.proyeccionMesadaDinamica - valorPagoReal;
                  return total + (diferenciaMesadas * numeroPagosReales);
                }, 0)
              ))}
            </div>
          </div>
        </div>
      )}

      <div className="nota-reajuste">
        <h3>1. REAJUSTE DE MESADA A CARGO DE LA EMPRESA ANTES DE COMPARTIR</h3>
        
        {/* Informaci√≥n de debug de datos disponibles */}
        {pensionesUnicas.length > 0 && (
          <div className="datos-disponibles">
            <h4>Datos disponibles en el sistema:</h4>
          
            <div className="calculo-base">
              <strong>Metodolog√≠a de c√°lculo din√°mico:</strong>
              <p>Valor base 1999: {formatearPagoReal(obtenerPagoEnero(1999) || 1609662)}</p>
              <div className="ejemplo-calculo">
                <p><strong>Ejemplo de c√°lculo de porcentajes y columnas:</strong></p>
                <ul>
                  <li><strong>Proyecci√≥n Din√°mica:</strong> 1999: {formatearPagoReal(obtenerPagoEnero(1999) || 1609662)} √∑ 236,460 = {((obtenerPagoEnero(1999) || 1609662) / 236460).toFixed(2)} veces el SMLMV</li>
                  <li><strong>Mesada Pagada Fiduprevisora reajustada con IPCs:</strong> √öltimo valor v√°lido antes de ca√≠das dr√°sticas</li>
                  <li><strong># de SMLMV (En el Reajuste x IPCs):</strong> Mesada Pagada con IPCs √∑ SMLMV del a√±o</li>
                  <li><strong>Diferencias de Mesadas:</strong> Proyecci√≥n Din√°mica - Mesada Pagada con IPCs</li>
                  <li><strong># de Mesadas:</strong> N√∫mero real de pagos hasta la ca√≠da dr√°stica (&gt;50%)</li>
                  <li><strong>üö® Detecci√≥n de ca√≠das dr√°sticas:</strong> Cuando un pago cae m√°s del 50%, se detiene el conteo</li>
                  <li><strong>üìä Ejemplo 2007:</strong> Agosto: $2,607,761 ‚Üí Septiembre: $1,014,335 (ca√≠da 61%) ‚Üí Solo cuenta 9 pagos</li>
                  <li><strong>Total Retroactivas:</strong> Diferencias de Mesadas √ó # de Mesadas v√°lidas</li>
                  <li><strong>F√≥rmula general:</strong> (Valor de la mesada √∑ SMLMV del a√±o)</li>
                  <li><strong>Nota:</strong> Los resultados representan cu√°ntas veces el SMLMV equivale cada tipo de mesada</li>
                </ul>
              </div>
            </div>
            
            
          </div>
        )}
        {pensionesUnicas.length === 0 && (
          <div className="sin-datos">
            <p><strong>No hay datos de pagos disponibles para este usuario.</strong></p>
          </div>
        )}
      </div>
    </div>
  );
};

export default Anexo2;
