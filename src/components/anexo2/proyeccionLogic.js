import { datosTabla1, datosTabla3, obtenerDatosA√±o } from './dataConstants';
import { obtenerPagoEnero, contarPagosA√±o, obtenerValorMesadaValidoA√±o } from './dataProcessing';

// Funci√≥n para generar proyecci√≥n din√°mica para la tabla 1 (1999-2007)
export const generarProyeccionDinamicaTabla1 = (pagosFinales) => {
  const primerPago1999 = obtenerPagoEnero(1999, pagosFinales);
  
  // Si no hay pago de 1999, retornar null para indicar que no hay datos
  if (primerPago1999 <= 0) {
    return null;
  }

  let valorBaseAcumulado = primerPago1999;
  let porcentajeSMLMVBase = null; // Guardar el porcentaje de la primera fila
  
  const datosConProyeccion = datosTabla1.map((row, index) => {
    if (index === 0) {
      // Para 1999, usar el valor real como proyecci√≥n
      const proyeccionCalculada = valorBaseAcumulado;
      const porcentajeSMLMV = (proyeccionCalculada / row.smlmv);
      porcentajeSMLMVBase = porcentajeSMLMV; // Guardar el valor base
      
      return {
        ...row,
        proyeccionMesadaDinamica: proyeccionCalculada,
        porcentajeSMLMVDinamico: porcentajeSMLMV,
        numeroPagosReales: contarPagosA√±o(row.a√±o, pagosFinales)
      };
    } else {
      // Para a√±os siguientes, aplicar el reajuste acumulativo
      const reajustePorcentaje = row.reajuste / 100;
      valorBaseAcumulado = valorBaseAcumulado * (1 + reajustePorcentaje);
      // Usar siempre el mismo porcentaje que la primera fila
      
      return {
        ...row,
        proyeccionMesadaDinamica: valorBaseAcumulado,
        porcentajeSMLMVDinamico: porcentajeSMLMVBase, // Usar el valor de la primera fila
        numeroPagosReales: contarPagosA√±o(row.a√±o, pagosFinales)
      };
    }
  });

  return datosConProyeccion;
};

// Funci√≥n para generar proyecci√≥n din√°mica para la tabla 3 (continuaci√≥n directa desde donde se cort√≥ la tabla 1)
export const generarProyeccionDinamicaTabla3 = (pagosFinales, datosTabla1Calculados) => {
  // Si no hay datos de la tabla 1, no podemos continuar
  if (!datosTabla1Calculados) {
    return null;
  }

  // Calcular el valor inicial para la tabla 3: MAYOR VALOR A CARGO DE LA EMPRESA
  const calcularValorInicialTabla3 = () => {
    const mesadaPlena = datosTabla1Calculados[datosTabla1Calculados.length - 1]?.proyeccionMesadaDinamica || 2952301;
    const mesadaPagadaConIPCs = datosTabla1Calculados[datosTabla1Calculados.length - 1]?.mesadaPagadaConIPC || 2607761;
    
    // Calcular valor despu√©s del descuento ‚â•50%
    const calcularValorDespuesCaida = () => {
      // Buscar pagos de 2007 para encontrar la ca√≠da dr√°stica
      const pagos2007 = pagosFinales.filter(pago => pago.a√±o === 2007);
      if (pagos2007.length === 0) return 1014335; // valor por defecto del ejemplo
      
      // Ordenar por mes
      const pagosOrdenados = pagos2007.sort((a, b) => {
        const mesesMap = {
          ene: 1, enero: 1, feb: 2, febrero: 2, mar: 3, marzo: 3,
          abr: 4, abril: 4, may: 5, mayo: 5, jun: 6, junio: 6,
          jul: 7, julio: 7, ago: 8, agosto: 8, sep: 9, sept: 9, septiembre: 9,
          oct: 10, octubre: 10, nov: 11, noviembre: 11, dic: 12, diciembre: 12
        };

        const obtenerMes = (periodo) => {
          if (!periodo) return 1;
          const periodoLower = periodo.toLowerCase();
          for (let [key, valor] of Object.entries(mesesMap)) {
            if (periodoLower.includes(key)) return valor;
          }
          return 1;
        };

        return obtenerMes(a.periodoPago) - obtenerMes(b.periodoPago);
      });
      
      // Buscar la ca√≠da dr√°stica
      let valorAnterior = null;
      for (let i = 0; i < pagosOrdenados.length; i++) {
        const pago = pagosOrdenados[i];
        if (pago.detalles && Array.isArray(pago.detalles)) {
          const mesadaDetalle = pago.detalles.find(det => det.codigo === 'MESAD');
          if (mesadaDetalle && mesadaDetalle.ingresos > 0) {
            const valorActual = mesadaDetalle.ingresos;
            
            if (valorAnterior !== null) {
              const porcentajeCaida = ((valorAnterior - valorActual) / valorAnterior) * 100;
              if (porcentajeCaida >= 50) {
                return valorActual; // Retorna el valor despu√©s de la ca√≠da
              }
            }
            valorAnterior = valorActual;
          }
        }
      }
      
      return 1014335; // valor por defecto del ejemplo si no encuentra ca√≠da
    };
    
    // MAYOR VALOR A CARGO DE LA EMPRESA = (Proyecci√≥n Din√°mica - Mesada Pagada con IPCs) + valor despu√©s del descuento ‚â•50%
    const diferencia = mesadaPlena - mesadaPagadaConIPCs;
    const valorDespuesCaida = calcularValorDespuesCaida();
    const valorEmpresa = diferencia + valorDespuesCaida;
    
    return valorEmpresa;
  };

  // Usar el MAYOR VALOR A CARGO DE LA EMPRESA como valor base inicial
  let valorBaseAcumulado = calcularValorInicialTabla3();

  // Funci√≥n para encontrar el punto exacto donde se cort√≥ la tabla 1 y contar mesadas faltantes
  const encontrarPuntoCorteYMesadasFaltantes = () => {
    // Buscar en todos los a√±os de la tabla 1 donde pudo haberse cortado
    for (let a√±o = 1999; a√±o <= 2007; a√±o++) {
      const pagosA√±o = pagosFinales.filter(pago => {
        const a√±oPago = parseInt(pago.a√±o);
        return a√±oPago === a√±o;
      });

      if (pagosA√±o.length === 0) continue;

      // Ordenar pagos cronol√≥gicamente
      const pagosOrdenados = pagosA√±o.sort((a, b) => {
        const mesesMap = {
          ene: 1, enero: 1, feb: 2, febrero: 2, mar: 3, marzo: 3,
          abr: 4, abril: 4, may: 5, mayo: 5, jun: 6, junio: 6,
          jul: 7, julio: 7, ago: 8, agosto: 8, sep: 9, sept: 9, septiembre: 9,
          oct: 10, octubre: 10, nov: 11, noviembre: 11, dic: 12, diciembre: 12
        };

        const obtenerMes = (periodo) => {
          if (!periodo) return 1;
          const periodoLower = periodo.toLowerCase();
          for (let [key, valor] of Object.entries(mesesMap)) {
            if (periodoLower.includes(key)) return valor;
          }
          return 1;
        };

        return obtenerMes(a.periodoPago) - obtenerMes(b.periodoPago);
      });

      let valorMesadaAnterior = null;
      
      for (let i = 0; i < pagosOrdenados.length; i++) {
        const pago = pagosOrdenados[i];
        
        if (pago.detalles && Array.isArray(pago.detalles)) {
          const mesadaDetalle = pago.detalles.find(det => det.codigo === 'MESAD');
          if (mesadaDetalle && mesadaDetalle.ingresos > 0) {
            const valorMesadaActual = mesadaDetalle.ingresos;
            
            // Verificar si hay una ca√≠da dr√°stica (m√°s del 50%)
            if (valorMesadaAnterior !== null) {
              const porcentajeCaida = ((valorMesadaAnterior - valorMesadaActual) / valorMesadaAnterior) * 100;
              
              if (porcentajeCaida > 50) {
                console.log(`üéØ Punto de corte encontrado en ${a√±o}: ${pago.periodoPago} - Ca√≠da ${porcentajeCaida.toFixed(2)}%`);
                
                // Calcular cu√°ntas mesadas faltan en el a√±o (desde este pago hasta diciembre)
                const mesadasFaltantes = pagosOrdenados.length - i;
                const primerPagoConDescuento = pagosOrdenados[i];
                
                console.log(`üìä Mesadas faltantes en ${a√±o}: ${mesadasFaltantes} (desde ${primerPagoConDescuento.periodoPago})`);
                
                return {
                  a√±oCorte: a√±o,
                  indiceCorte: i,
                  mesadasFaltantes: mesadasFaltantes,
                  valorPrimerPagoConDescuento: valorMesadaActual,
                  periodoPrimerPagoConDescuento: primerPagoConDescuento.periodoPago,
                  datosA√±o: datosTabla1.find(d => d.a√±o === a√±o) || datosTabla3.find(d => d.a√±o === a√±o)
                };
              }
            }
            valorMesadaAnterior = valorMesadaActual;
          }
        }
      }
    }
    
    console.log('üîç No se encontr√≥ punto de corte en a√±os 1999-2007');
    return null;
  };

  const puntoCorte = encontrarPuntoCorteYMesadasFaltantes();
  
  // Recopilar todos los pagos para la tabla 3
  const pagosTabla3 = [];
  
  if (puntoCorte && puntoCorte.datosA√±o) {
    // 1. Agregar una sola fila para el a√±o donde se cort√≥ con las mesadas faltantes
    pagosTabla3.push({
      a√±o: puntoCorte.a√±oCorte,
      smlmv: puntoCorte.datosA√±o.smlmv,
      reajuste: puntoCorte.datosA√±o.reajuste,
      valorReal: puntoCorte.valorPrimerPagoConDescuento,
      esContinuacion: true,
      mesadasFaltantes: puntoCorte.mesadasFaltantes,
      periodoInicio: puntoCorte.periodoPrimerPagoConDescuento
    });
  }

  // 2. Agregar pagos de a√±os posteriores al corte
  const a√±osPosteriores = new Set();
  
  pagosFinales.forEach(pago => {
    const a√±oPago = parseInt(pago.a√±o);
    const a√±oCorte = puntoCorte ? puntoCorte.a√±oCorte : 2007;
    
    if (a√±oPago > a√±oCorte && !a√±osPosteriores.has(a√±oPago)) {
      const pagosDelA√±o = contarPagosA√±o(a√±oPago, pagosFinales);
      if (pagosDelA√±o > 0) {
        a√±osPosteriores.add(a√±oPago);
        
        // Encontrar el SMLMV correspondiente
        const datosA√±o = datosTabla3.find(d => d.a√±o === a√±oPago);
        if (datosA√±o) {
          pagosTabla3.push({
            a√±o: a√±oPago,
            smlmv: datosA√±o.smlmv,
            reajuste: datosA√±o.reajuste,
            valorReal: obtenerValorMesadaValidoA√±o(a√±oPago, pagosFinales),
            esContinuacion: false,
            numeroPagos: pagosDelA√±o
          });
        }
      }
    }
  });

  // Ordenar por a√±o
  pagosTabla3.sort((a, b) => a.a√±o - b.a√±o);

  if (pagosTabla3.length === 0) {
    return [];
  }

  // Generar proyecci√≥n din√°mica
  let porcentajeSMLMVBase = null; // Variable para guardar el porcentaje base de la primera fila
  
  const datosConProyeccion = pagosTabla3.map((row, index) => {
    // Para continuaciones del a√±o de corte, usar datos espec√≠ficos del corte
    if (row.esContinuacion && index === 0) {
      // Primer pago de continuaci√≥n, usar el valor base calculado
      const porcentajeSMLMV = (valorBaseAcumulado / row.smlmv);
      porcentajeSMLMVBase = porcentajeSMLMV; // Guardar como valor base para todas las filas
      
      return {
        ...row,
        proyeccionMesadaDinamica: valorBaseAcumulado,
        porcentajeSMLMVDinamico: porcentajeSMLMV,
        numeroPagosReales: row.mesadasFaltantes
      };
    } else {
      // Para a√±os nuevos, aplicar reajuste acumulativo
      const reajustePorcentaje = row.reajuste / 100;
      valorBaseAcumulado = valorBaseAcumulado * (1 + reajustePorcentaje);
      
      return {
        ...row,
        proyeccionMesadaDinamica: valorBaseAcumulado,
        porcentajeSMLMVDinamico: porcentajeSMLMVBase, // Usar el valor de la primera fila
        numeroPagosReales: row.numeroPagos || contarPagosA√±o(row.a√±o, pagosFinales)
      };
    }
  });

  return datosConProyeccion;
};
